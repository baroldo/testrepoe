import pandas as pd
from statsmodels.tsa.seasonal import STL

# ----------------------------
# Step 1: Define main function
# ----------------------------

def seasonally_adjust_dataframe(df_wide, min_months=12, return_wide=True):
    """
    Seasonally adjusts turnover values in a wide-format DataFrame.
    
    Parameters:
        df_wide (pd.DataFrame): DataFrame with customer_number and monthly columns (YYYY-MM)
        min_months (int): Minimum number of months required to apply seasonal adjustment
        return_wide (bool): If True, returns wide-format DataFrame; else, long-format
    
    Returns:
        pd.DataFrame: Seasonally adjusted DataFrame
    """
    
    # Step 1: Reshape from wide to long format
    df_long = df_wide.melt(id_vars='customer_number', var_name='month', value_name='turnover')
    df_long['month'] = pd.to_datetime(df_long['month'])
    
    # Step 2: Define per-customer adjustment logic
    def adjust_customer(group):
        group = group.set_index('month').sort_index()

        # Create full range from min to max month
        full_idx = pd.date_range(start=group.index.min(), end=group.index.max(), freq='MS')
        group = group.reindex(full_idx)
        group['customer_number'] = group['customer_number'].ffill()  # Fill in ID

        if group['turnover'].notna().sum() < min_months:
            # Too little data — return as-is
            group['turnover_adj'] = group['turnover']
            group['adjusted'] = False
        else:
            try:
                stl = STL(group['turnover'], period=12, robust=True)
                result = stl.fit()
                group['turnover_adj'] = group['turnover'] - result.seasonal
                group['adjusted'] = True
            except Exception as e:
                # STL failed — return unadjusted
                group['turnover_adj'] = group['turnover']
                group['adjusted'] = False

        group['month'] = group.index
        return group.reset_index(drop=True)

    # Step 3: Apply STL per customer
    df_adjusted = df_long.groupby('customer_number', group_keys=False).apply(adjust_customer)

    # Step 4: Return in desired format
    if return_wide:
        df_pivot = df_adjusted.pivot(index='customer_number', columns='month', values='turnover_adj')
        df_pivot.columns = df_pivot.columns.strftime('%Y-%m')
        return df_pivot
    else:
        return df_adjusted[['customer_number', 'month', 'turnover', 'turnover_adj', 'adjusted']]
