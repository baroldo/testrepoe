import pandas as pd
from statsmodels.tsa.seasonal import STL

# ----------------------------
# Step 1: Define main function
# ----------------------------

def seasonally_adjust_dataframe(df_wide, min_months=12, return_wide=True):
    """
    Seasonally adjusts turnover values in a wide-format DataFrame.
    
    Parameters:
        df_wide (pd.DataFrame): DataFrame with customer_number and monthly columns (YYYY-MM)
        min_months (int): Minimum number of months required to apply seasonal adjustment
        return_wide (bool): If True, returns wide-format DataFrame; else, long-format
    
    Returns:
        pd.DataFrame: Seasonally adjusted DataFrame
    """
    
    # Step 1: Reshape from wide to long format
    df_long = df_wide.melt(id_vars='customer_number', var_name='month', value_name='turnover')
    df_long['month'] = pd.to_datetime(df_long['month'])
    
    # Step 2: Define per-customer adjustment logic
    def adjust_customer(group):
        group = group.set_index('month').sort_index()

        # Create full range from min to max month
        full_idx = pd.date_range(start=group.index.min(), end=group.index.max(), freq='MS')
        group = group.reindex(full_idx)
        group['customer_number'] = group['customer_number'].ffill()  # Fill in ID

        if group['turnover'].notna().sum() < min_months:
            # Too little data — return as-is
            group['turnover_adj'] = group['turnover']
            group['adjusted'] = False
        else:
            try:
                stl = STL(group['turnover'], period=12, robust=True)
                result = stl.fit()
                group['turnover_adj'] = group['turnover'] - result.seasonal
                group['adjusted'] = True
            except Exception as e:
                # STL failed — return unadjusted
                group['turnover_adj'] = group['turnover']
                group['adjusted'] = False

        group['month'] = group.index
        return group.reset_index(drop=True)

    # Step 3: Apply STL per customer
    df_adjusted = df_long.groupby('customer_number', group_keys=False).apply(adjust_customer)

    # Step 4: Return in desired format
    if return_wide:
        df_pivot = df_adjusted.pivot(index='customer_number', columns='month', values='turnover_adj')
        df_pivot.columns = df_pivot.columns.strftime('%Y-%m')
        return df_pivot
    else:
        return df_adjusted[['customer_number', 'month', 'turnover', 'turnover_adj', 'adjusted']]



adjustment 2:


import pandas as pd
from statsmodels.tsa.seasonal import STL

def seasonally_adjust_and_pivot(df_long, return_wide=True):
    """
    Seasonally adjusts turnover for each customer using all available history,
    aligning to month-end dates, and optionally returns the result in wide format.
    
    Parameters:
        df_long (pd.DataFrame): long format with columns ['customer_number', 'month', 'turnover']
        return_wide (bool): If True, returns wide-format; else returns long-format with adjustments
    
    Returns:
        pd.DataFrame: Seasonally adjusted DataFrame
    """
    df_long = df_long.copy()
    
    # Force month to datetime and align to month-end
    df_long['month'] = pd.to_datetime(df_long['month']) + pd.offsets.MonthEnd(0)

    def adjust_customer(group):
        group = group.set_index('month').sort_index()

        # Fill missing months using month-end frequency
        full_idx = pd.date_range(start=group.index.min(), end=group.index.max(), freq='M')
        group = group.reindex(full_idx)
        group['customer_number'] = group['customer_number'].ffill()

        # Attempt STL decomposition
        try:
            stl = STL(group['turnover'], period=12, robust=True)
            result = stl.fit()
            group['turnover_adj'] = group['turnover'] - result.seasonal
        except Exception:
            group['turnover_adj'] = group['turnover']

        group['month'] = group.index
        return group.reset_index(drop=True)

    df_adjusted = df_long.groupby('customer_number', group_keys=False).apply(adjust_customer)

    if return_wide:
        df_wide = df_adjusted.pivot(index='customer_number', columns='month', values='turnover_adj')
        df_wide.columns = df_wide.columns.strftime('%Y-%m-%d')  # Format with full date
        return df_wide
    else:
        return df_adjusted[['customer_number', 'month', 'turnover', 'turnover_adj']]


edition3:

import pandas as pd
from statsmodels.tsa.seasonal import STL

def seasonally_adjust_long(df_long):
    """
    Seasonally adjusts turnover per customer in long format.
    Assumes df_long has columns like ['customer_number', 'month', 'turnover', 'category'].
    Uses month-end dates.

    Returns:
        DataFrame with original columns + 'turnover_adj' in long format
    """
    df_long = df_long.copy()

    # Ensure 'month' is datetime and set to month-end
    df_long['month'] = pd.to_datetime(df_long['month']) + pd.offsets.MonthEnd(0)

    # Sort for consistency
    df_long = df_long.sort_values(['customer_number', 'month'])

    def adjust_customer(group):
        group = group.set_index('month').sort_index()

        # Save other columns to restore later (excluding turnover)
        other_cols = group.drop(columns=['turnover'], errors='ignore')

        # Reindex to continuous monthly range
        full_idx = pd.date_range(start=group.index.min(), end=group.index.max(), freq='M')
        group = group.reindex(full_idx)

        # Refill customer_number and other metadata
        for col in other_cols.columns:
            group[col] = other_cols[col].ffill()

        # Apply STL only if sufficient data
        if group['turnover'].notna().sum() < 24:
            group['turnover_adj'] = group['turnover']
        else:
            try:
                stl = STL(group['turnover'], period=12, robust=True)
                result = stl.fit()
                group['turnover_adj'] = group['turnover'] - result.seasonal
            except Exception:
                group['turnover_adj'] = group['turnover']

        # Reset index to return to long format
        group['month'] = group.index
        return group.reset_index(drop=True)

    # Apply STL adjustment per customer
    df_adjusted = df_long.groupby('customer_number', group_keys=False).apply(adjust_customer)

    return df_adjusted


