import pandas as pd
import numpy as np

def calculate_yearly_percent_change(df_wide):
    df = df_wide.copy()
    results = []

    columns = list(df.columns)  # Keep the order â€” assumed to be ascending (oldest to newest)

    for idx, row in df.iterrows():
        # Find last non-zero value (right to left)
        last_non_zero_col = None
        for col in reversed(columns):
            val = row[col]
            if pd.notna(val) and val != 0:
                last_non_zero_col = col
                break

        if last_non_zero_col is None:
            results.append(1)
            continue

        try:
            # Get index of last non-zero column
            col_idx = columns.index(last_non_zero_col)

            # Get the column 12 months earlier
            prev_idx = col_idx - 12
            if prev_idx < 0:
                results.append(1)
                continue

            recent_val = row[columns[col_idx]]
            prev_val = row[columns[prev_idx]]

            if pd.isna(prev_val) or prev_val == 0:
                results.append(1)
            else:
                pct_change = (recent_val - prev_val) / prev_val
                results.append(pct_change)
        except Exception:
            results.append(1)

    return pd.Series(results, index=df.index, name="pct_change_from_last_year")

# Assuming df_wide is your DataFrame with customer_number as index, and months as columns
# Columns should already be ordered from oldest to newest

pct_change_series = calculate_yearly_percent_change(df_wide)

# Add it back to your DataFrame
df_wide["pct_change_from_last_year"] = pct_change_series
